# -*- coding: utf-8 -*-
"""olympic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QGw1-IOFlyg9Hm9PRM29cnOQbjtIKdEu
"""

import pandas as pd             
import matplotlib.pyplot as plt
import seaborn as sns

summer = pd.read_csv("summer.csv")

winter = pd.read_csv("winter.csv")

dicti = pd.read_csv("dictionary.csv")

summer.head()

summer.tail()

winter.head()

winter.tail()

dicti.head()  # get first 5 rows

dicti.tail()

summer.info()

winter.info()

dicti.info()

summer.shape

winter.shape

dicti.shape

summer[summer.isnull().any(axis = 1)]

winter[winter.isnull().any(axis = 1)]

dicti[dicti.isnull().any(axis = 1)]

olympics = pd.concat([summer,winter],axis = 0, keys = ['summer','winter'], names = ["Edition"]).reset_index().drop(columns = "level_1")
olympics

olympics.info()

olympics = olympics.merge(dicti.iloc[:,:2], how = "left", left_on = "Country", right_on = "Code").drop(columns = ["Code"])
olympics

olympics.reset_index(drop = True, inplace = True)
olympics

olympics.rename(columns = {"Country_x":"Code", "Country_y":"Country"}, inplace = True)
olympics

dicti

dicti.rename(columns = {"GDP per Capita":"GDP"}, inplace = True)
dicti

olympics.loc[olympics.Country.isnull()]

missing_index = olympics.loc[olympics.Country.isnull()].index
missing_index

olympics.loc[olympics.Country.isnull()].Code.value_counts()

old_c = olympics.loc[olympics.Country.isnull(),:].Code.value_counts().index
old_c

mapper = pd.Series(index=old_c, name = "Country", data = ["Soviet Union", "East Germany", "Romania", "West Germany", "Czechoslovakia",
                               "Yugoslavia", "Unified Team", "Unified Team of Germany", "Mixed teams", "Serbia",
                              "Australasia", "Russian Empire", "Montenegro", "Trinidad and Tobago", "Bohemia", 
                              "West Indies Federation", "Singapore", "Independent Olympic Participants"])

mapper

olympics.loc[missing_index,"Code"].map(mapper)

olympics.Country.fillna(olympics.Code.map(mapper),inplace = True)

olympics.loc[missing_index]

olympics.info()

olympics[olympics.Code.isna()]

olympics.dropna(subset = ["Code"], inplace = True)

olympics.info()

olympics.reset_index(drop = True, inplace = True)
olympics

olympics.nunique()

olympics.dtypes

olympics.Medal = olympics.Medal.astype("category")

olympics.Medal.sort_values()

olympics.Medal.cat.set_categories(["Bronze","Silver", "Gold"], ordered = True)

olympics.Medal.sort_values()

olympics

dicti

"""# The most successful countries """

olympics.Country.value_counts()

top15 = olympics.Country.value_counts().head(15)
top15

ax = top15.plot(kind = "bar", fontsize = 10, figsize = (10,7))
plt.title("top 15 countries by medals", fontsize = 10)
plt.ylabel("Medals", fontsize = 10)

olympics_15 = olympics[olympics.Country.isin(top15.index)]
olympics_15

plt.figure(figsize = (20,10))

sns.set(font_scale = 1.5, palette = "dark")

ax = sns.countplot(data = olympics_15, x = "Country", order = top15.index)
plt.title("abc", fontsize = 15)
for p in ax.patches:
    height = p.get_height()
    ax.text(x = p.get_x()+(p.get_width()/2), # x-coordinate position of data label, padded to be in the middle of the bar
    y = height+0.2, ha = 'center',s = '{:.0f}'.format(height)) # data label, formatted to ignore decimals
    #ha = ‘center’) # sets horizontal alignment (ha) to center
plt.xticks(rotation = 'vertical')    
plt.show()

plt.figure(figsize = (20,10))

sns.set(font_scale = 1.5, palette = "dark")

ax = sns.countplot(data = olympics_15, x = "Country",hue = "Edition", order = top15.index)
plt.title("abc", fontsize = 15)
for p in ax.patches:
    height = p.get_height()
    ax.text(x = p.get_x()+(p.get_width()/2), # x-coordinate position of data label, padded to be in the middle of the bar
    y = height+0.2, ha = 'center',s = '{:.0f}'.format(height)) # data label, formatted to ignore decimals
    #ha = ‘center’) # sets horizontal alignment (ha) to center
plt.xticks(rotation = 'vertical')    
plt.show()

plt.figure(figsize = (20,10))

sns.set(font_scale = 1.5, palette = "dark")

sns.countplot(data = olympics_15, x = "Country",hue = "Medal", order = top15.index, hue_order = ["Gold", "Silver","Bronze"])
plt.title("abc", fontsize = 15)

plt.xticks(rotation = 'vertical')    
plt.show()

medals_per_country = pd.crosstab(index = olympics.Country, columns = olympics.Medal, margins = True, margins_name = "Total")
medals_per_country

medals_per_country = medals_per_country[["Total", "Gold", "Silver", "Bronze"]].sort_values(by = ["Total", "Gold", "Silver", "Bronze"], ascending = False)
medals_per_country

medals_per_country.head(20)

dicti

medals_per_country = medals_per_country.merge(dicti, how = "left", left_index = True, right_on = "Country").drop(columns = ["Code"]).set_index("Country")
medals_per_country

olympics["Games"] = olympics.apply(lambda x: str(x.Year) + " " + x.City,axis = 1)
olympics

olympics["Games"].nunique()

olympics["Games"].value_counts()

olympics.groupby("Country").apply(lambda x: x.Games.nunique())

medals_per_country["Total Games"] = olympics.groupby("Country").apply(lambda x: x.Games.nunique())
medals_per_country

medals_per_country.rank(ascending = False)

